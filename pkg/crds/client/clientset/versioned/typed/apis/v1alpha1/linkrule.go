// Copyright 2023 The Kelemetry Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"

	v1alpha1 "github.com/kubewharf/kelemetry/pkg/crds/apis/v1alpha1"
	scheme "github.com/kubewharf/kelemetry/pkg/crds/client/clientset/versioned/scheme"
)

// LinkRulesGetter has a method to return a LinkRuleInterface.
// A group's client should implement this interface.
type LinkRulesGetter interface {
	LinkRules() LinkRuleInterface
}

// LinkRuleInterface has methods to work with LinkRule resources.
type LinkRuleInterface interface {
	Create(ctx context.Context, linkRule *v1alpha1.LinkRule, opts v1.CreateOptions) (*v1alpha1.LinkRule, error)
	Update(ctx context.Context, linkRule *v1alpha1.LinkRule, opts v1.UpdateOptions) (*v1alpha1.LinkRule, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1alpha1.LinkRule, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.LinkRuleList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(
		ctx context.Context,
		name string,
		pt types.PatchType,
		data []byte,
		opts v1.PatchOptions,
		subresources ...string,
	) (result *v1alpha1.LinkRule, err error)
	LinkRuleExpansion
}

// linkRules implements LinkRuleInterface
type linkRules struct {
	client rest.Interface
}

// newLinkRules returns a LinkRules
func newLinkRules(c *KelemetryV1alpha1Client) *linkRules {
	return &linkRules{
		client: c.RESTClient(),
	}
}

// Get takes name of the linkRule, and returns the corresponding linkRule object, and an error if there is any.
func (c *linkRules) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.LinkRule, err error) {
	result = &v1alpha1.LinkRule{}
	err = c.client.Get().
		Resource("linkrules").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of LinkRules that match those selectors.
func (c *linkRules) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.LinkRuleList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.LinkRuleList{}
	err = c.client.Get().
		Resource("linkrules").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested linkRules.
func (c *linkRules) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Resource("linkrules").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a linkRule and creates it.  Returns the server's representation of the linkRule, and an error, if there is any.
func (c *linkRules) Create(ctx context.Context, linkRule *v1alpha1.LinkRule, opts v1.CreateOptions) (result *v1alpha1.LinkRule, err error) {
	result = &v1alpha1.LinkRule{}
	err = c.client.Post().
		Resource("linkrules").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(linkRule).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a linkRule and updates it. Returns the server's representation of the linkRule, and an error, if there is any.
func (c *linkRules) Update(ctx context.Context, linkRule *v1alpha1.LinkRule, opts v1.UpdateOptions) (result *v1alpha1.LinkRule, err error) {
	result = &v1alpha1.LinkRule{}
	err = c.client.Put().
		Resource("linkrules").
		Name(linkRule.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(linkRule).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the linkRule and deletes it. Returns an error if one occurs.
func (c *linkRules) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("linkrules").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *linkRules) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Resource("linkrules").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched linkRule.
func (c *linkRules) Patch(
	ctx context.Context,
	name string,
	pt types.PatchType,
	data []byte,
	opts v1.PatchOptions,
	subresources ...string,
) (result *v1alpha1.LinkRule, err error) {
	result = &v1alpha1.LinkRule{}
	err = c.client.Patch(pt).
		Resource("linkrules").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
