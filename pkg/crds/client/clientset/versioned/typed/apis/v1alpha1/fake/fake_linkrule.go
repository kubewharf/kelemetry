// Copyright 2023 The Kelemetry Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"

	v1alpha1 "github.com/kubewharf/kelemetry/pkg/crds/apis/v1alpha1"
)

// FakeLinkRules implements LinkRuleInterface
type FakeLinkRules struct {
	Fake *FakeKelemetryV1alpha1
}

var linkrulesResource = v1alpha1.SchemeGroupVersion.WithResource("linkrules")

var linkrulesKind = v1alpha1.SchemeGroupVersion.WithKind("LinkRule")

// Get takes name of the linkRule, and returns the corresponding linkRule object, and an error if there is any.
func (c *FakeLinkRules) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.LinkRule, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(linkrulesResource, name), &v1alpha1.LinkRule{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.LinkRule), err
}

// List takes label and field selectors, and returns the list of LinkRules that match those selectors.
func (c *FakeLinkRules) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.LinkRuleList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(linkrulesResource, linkrulesKind, opts), &v1alpha1.LinkRuleList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.LinkRuleList{ListMeta: obj.(*v1alpha1.LinkRuleList).ListMeta}
	for _, item := range obj.(*v1alpha1.LinkRuleList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested linkRules.
func (c *FakeLinkRules) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(linkrulesResource, opts))
}

// Create takes the representation of a linkRule and creates it.  Returns the server's representation of the linkRule, and an error, if there is any.
func (c *FakeLinkRules) Create(
	ctx context.Context,
	linkRule *v1alpha1.LinkRule,
	opts v1.CreateOptions,
) (result *v1alpha1.LinkRule, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(linkrulesResource, linkRule), &v1alpha1.LinkRule{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.LinkRule), err
}

// Update takes the representation of a linkRule and updates it. Returns the server's representation of the linkRule, and an error, if there is any.
func (c *FakeLinkRules) Update(
	ctx context.Context,
	linkRule *v1alpha1.LinkRule,
	opts v1.UpdateOptions,
) (result *v1alpha1.LinkRule, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(linkrulesResource, linkRule), &v1alpha1.LinkRule{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.LinkRule), err
}

// Delete takes name of the linkRule and deletes it. Returns an error if one occurs.
func (c *FakeLinkRules) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(linkrulesResource, name, opts), &v1alpha1.LinkRule{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeLinkRules) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(linkrulesResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.LinkRuleList{})
	return err
}

// Patch applies the patch and returns the patched linkRule.
func (c *FakeLinkRules) Patch(
	ctx context.Context,
	name string,
	pt types.PatchType,
	data []byte,
	opts v1.PatchOptions,
	subresources ...string,
) (result *v1alpha1.LinkRule, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(linkrulesResource, name, pt, data, subresources...), &v1alpha1.LinkRule{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.LinkRule), err
}
